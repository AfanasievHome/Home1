sergi@MY_BOOK_555 MINGW64 /d/www/java
$ git init
Initialized empty Git repository in D:/www/java/.git/

sergi@MY_BOOK_555 MINGW64 /d/www/java (master)
$ gitt add .
bash: gitt: command not found

sergi@MY_BOOK_555 MINGW64 /d/www/java (master)
$ git add .

sergi@MY_BOOK_555 MINGW64 /d/www/java (master)
$ git status
On branch master

No commits yet

Changes to be committed:
  (use "git rm --cached <file>..." to unstage)
        new file:   index.html
        new file:   js/main.js


sergi@MY_BOOK_555 MINGW64 /d/www/java (master)
$ git commit -m "Add ferst commit"
[master (root-commit) 77080df] Add ferst commit
 2 files changed, 252 insertions(+)
 create mode 100644 index.html
 create mode 100644 js/main.js

sergi@MY_BOOK_555 MINGW64 /d/www/java (master)
$ git status
On branch master
nothing to commit, working tree clean

sergi@MY_BOOK_555 MINGW64 /d/www/java (master)
$ git status
On branch master
nothing to commit, working tree clean

sergi@MY_BOOK_555 MINGW64 /d/www/java (master)
$ git status
On branch master
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        modified:   index.html

no changes added to commit (use "git add" and/or "git commit -a")

sergi@MY_BOOK_555 MINGW64 /d/www/java (master)
$ git commit -a
hint: Waiting for your editor to close the file...
git status
git commit add
exit
Aborting commit due to empty commit message.

sergi@MY_BOOK_555 MINGW64 /d/www/java (master)
$ git status
On branch master
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        modified:   index.html

Untracked files:
  (use "git add <file>..." to include in what will be committed)
        tmp.txt

no changes added to commit (use "git add" and/or "git commit -a")

sergi@MY_BOOK_555 MINGW64 /d/www/java (master)
$ git commit -m "add tmp"
On branch master
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        modified:   index.html

Untracked files:
  (use "git add <file>..." to include in what will be committed)
        tmp.txt

no changes added to commit (use "git add" and/or "git commit -a")

sergi@MY_BOOK_555 MINGW64 /d/www/java (master)
$ git add *.html

sergi@MY_BOOK_555 MINGW64 /d/www/java (master)
$ git status
On branch master
Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
        modified:   index.html

Untracked files:
  (use "git add <file>..." to include in what will be committed)
        tmp.txt


sergi@MY_BOOK_555 MINGW64 /d/www/java (master)
$ git commit -m "Temp add"
[master 73bf9bb] Temp add
 1 file changed, 1 insertion(+), 1 deletion(-)

sergi@MY_BOOK_555 MINGW64 /d/www/java (master)
$ git status
On branch master
Untracked files:
  (use "git add <file>..." to include in what will be committed)
        tmp.txt

nothing added to commit but untracked files present (use "git add" to track)

sergi@MY_BOOK_555 MINGW64 /d/www/java (master)
$ git log
commit 73bf9bb8944c28aaab26a0a8e35bbb05860a2f6d (HEAD -> master)
Author: AfanasievHome <sergiy79@list.ru>
Date:   Sun Feb 4 13:01:37 2024 +0300

    Temp add

commit 77080df9a75d7487704d137510563782f6fefa51
Author: AfanasievHome <sergiy79@list.ru>
Date:   Sun Feb 4 12:45:57 2024 +0300

    Add ferst commit

sergi@MY_BOOK_555 MINGW64 /d/www/java (master)
$ git status
On branch master
Untracked files:
  (use "git add <file>..." to include in what will be committed)
        .gitignore

nothing added to commit but untracked files present (use "git add" to track)

sergi@MY_BOOK_555 MINGW64 /d/www/java (master)
$ git add .

sergi@MY_BOOK_555 MINGW64 /d/www/java (master)
$ git commit -m "gitignore file add"
[master fa430bb] gitignore file add
 1 file changed, 1 insertion(+)
 create mode 100644 .gitignore

sergi@MY_BOOK_555 MINGW64 /d/www/java (master)
$ git status
On branch master
nothing to commit, working tree clean

sergi@MY_BOOK_555 MINGW64 /d/www/java (master)
$ git status
On branch master
nothing to commit, working tree clean

sergi@MY_BOOK_555 MINGW64 /d/www/java (master)
$ git status
On branch master
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        modified:   index.html

no changes added to commit (use "git add" and/or "git commit -a")

sergi@MY_BOOK_555 MINGW64 /d/www/java (master)
$ git add .

sergi@MY_BOOK_555 MINGW64 /d/www/java (master)
$ git status
On branch master
Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
        modified:   index.html


sergi@MY_BOOK_555 MINGW64 /d/www/java (master)
$ git commit -m "Check commit"
[master afdb6ae] Check commit
 1 file changed, 1 insertion(+), 1 deletion(-)

sergi@MY_BOOK_555 MINGW64 /d/www/java (master)
$ git status
On branch master
nothing to commit, working tree clean

sergi@MY_BOOK_555 MINGW64 /d/www/java (master)
$ git log --oneline
afdb6ae (HEAD -> master) Check commit
fa430bb gitignore file add
73bf9bb Temp add
77080df Add ferst commit

sergi@MY_BOOK_555 MINGW64 /d/www/java (master)
$ git checkout afdb6ae
Note: switching to 'afdb6ae'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by switching back to a branch.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -c with the switch command. Example:

  git switch -c <new-branch-name>

Or undo this operation with:

  git switch -

Turn off this advice by setting config variable advice.detachedHead to false

HEAD is now at afdb6ae Check commit

sergi@MY_BOOK_555 MINGW64 /d/www/java ((afdb6ae...))
$ index.html
bash: index.html: command not found

sergi@MY_BOOK_555 MINGW64 /d/www/java ((afdb6ae...))
$ git checkout master
Switched to branch 'master'

sergi@MY_BOOK_555 MINGW64 /d/www/java (master)
$ git log
commit afdb6aea1ff775c9aa67d994b640d00bf81d0c72 (HEAD -> master)
Author: AfanasievHome <sergiy79@list.ru>
Date:   Sun Feb 4 13:45:43 2024 +0300

    Check commit

commit fa430bb95c784563caea888d379d3671a278dce4
Author: AfanasievHome <sergiy79@list.ru>
Date:   Sun Feb 4 13:13:44 2024 +0300

    gitignore file add

commit 73bf9bb8944c28aaab26a0a8e35bbb05860a2f6d
Author: AfanasievHome <sergiy79@list.ru>
Date:   Sun Feb 4 13:01:37 2024 +0300

    Temp add

set mark: ...skipping...
commit afdb6aea1ff775c9aa67d994b640d00bf81d0c72 (HEAD -> master)
Author: AfanasievHome <sergiy79@list.ru>
Date:   Sun Feb 4 13:45:43 2024 +0300

    Check commit

commit fa430bb95c784563caea888d379d3671a278dce4
Author: AfanasievHome <sergiy79@list.ru>
Date:   Sun Feb 4 13:13:44 2024 +0300

    gitignore file add

commit 73bf9bb8944c28aaab26a0a8e35bbb05860a2f6d
Author: AfanasievHome <sergiy79@list.ru>
Date:   Sun Feb 4 13:01:37 2024 +0300

    Temp add

commit 77080df9a75d7487704d137510563782f6fefa51
Author: AfanasievHome <sergiy79@list.ru>
Date:   Sun Feb 4 12:45:57 2024 +0300

    Add ferst commit
(END)

commit fa430bb95c784563caea888d379d3671a278dce4
Author: AfanasievHome <sergiy79@list.ru>
Date:   Sun Feb 4 13:13:44 2024 +0300

    gitignore file add

commit 73bf9bb8944c28aaab26a0a8e35bbb05860a2f6d
Author: AfanasievHome <sergiy79@list.ru>
Date:   Sun Feb 4 13:01:37 2024 +0300

    Temp add

commit 77080df9a75d7487704d137510563782f6fefa51
Author: AfanasievHome <sergiy79@list.ru>
Date:   Sun Feb 4 12:45:57 2024 +0300

    Add ferst commit

sergi@MY_BOOK_555 MINGW64 /d/www/java (master)
$ git log --online
fatal: unrecognized argument: --online

sergi@MY_BOOK_555 MINGW64 /d/www/java (master)
$ git log --oneline
afdb6ae (HEAD -> master) Check commit
fa430bb gitignore file add
73bf9bb Temp add
77080df Add ferst commit

sergi@MY_BOOK_555 MINGW64 /d/www/java (master)
$ git checkout afdb6ae
Note: switching to 'afdb6ae'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by switching back to a branch.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -c with the switch command. Example:

  git switch -c <new-branch-name>

Or undo this operation with:

  git switch -

Turn off this advice by setting config variable advice.detachedHead to false

HEAD is now at afdb6ae Check commit

sergi@MY_BOOK_555 MINGW64 /d/www/java ((afdb6ae...))
$ git diff

sergi@MY_BOOK_555 MINGW64 /d/www/java ((afdb6ae...))
$ ^C

sergi@MY_BOOK_555 MINGW64 /d/www/java ((afdb6ae...))
$ git checkout master
Switched to branch 'master'

sergi@MY_BOOK_555 MINGW64 /d/www/java (master)
$ git diff

sergi@MY_BOOK_555 MINGW64 /d/www/java (master)
$ git diff --cashed
error: invalid option: --cashed
usage: git diff [<options>] [<commit>] [--] [<path>...]
   or: git diff [<options>] --cached [--merge-base] [<commit>] [--] [<path>...]
   or: git diff [<options>] [--merge-base] <commit> [<commit>...] <commit> [--] [<path>...]
   or: git diff [<options>] <commit>...<commit> [--] [<path>...]
   or: git diff [<options>] <blob> <blob>
   or: git diff [<options>] --no-index [--] <path> <path>

common diff options:
  -z            output diff-raw with lines terminated with NUL.
  -p            output patch format.
  -u            synonym for -p.
  --patch-with-raw
                output both a patch and the diff-raw format.
  --stat        show diffstat instead of patch.
  --numstat     show numeric diffstat instead of patch.
  --patch-with-stat
                output a patch and prepend its diffstat.

sergi@MY_BOOK_555 MINGW64 /d/www/java (master)
$ git diff HEAD

sergi@MY_BOOK_555 MINGW64 /d/www/java (master)
$ git branch
* master

sergi@MY_BOOK_555 MINGW64 /d/www/java (master)
$ git status
On branch master
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        modified:   index.html

Untracked files:
  (use "git add <file>..." to include in what will be committed)
        tatus

no changes added to commit (use "git add" and/or "git commit -a")

sergi@MY_BOOK_555 MINGW64 /d/www/java (master)
$ git add index.html

sergi@MY_BOOK_555 MINGW64 /d/www/java (master)
$ git status
On branch master
Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
        modified:   index.html

Untracked files:
  (use "git add <file>..." to include in what will be committed)
        tatus


sergi@MY_BOOK_555 MINGW64 /d/www/java (master)
$ git status
On branch master
Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
        modified:   index.html


sergi@MY_BOOK_555 MINGW64 /d/www/java (master)
$ git commit -m "Cheng index html"
[master 0ca6e12] Cheng index html
 1 file changed, 2 insertions(+), 2 deletions(-)

sergi@MY_BOOK_555 MINGW64 /d/www/java (master)
$ git diff

sergi@MY_BOOK_555 MINGW64 /d/www/java (master)
$ git log --oneline
0ca6e12 (HEAD -> master) Cheng index html
afdb6ae Check commit
fa430bb gitignore file add
73bf9bb Temp add
77080df Add ferst commit

sergi@MY_BOOK_555 MINGW64 /d/www/java (master)
$ git checkout 0ca6e12
Note: switching to '0ca6e12'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by switching back to a branch.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -c with the switch command. Example:

  git switch -c <new-branch-name>

Or undo this operation with:

  git switch -

Turn off this advice by setting config variable advice.detachedHead to false

HEAD is now at 0ca6e12 Cheng index html

sergi@MY_BOOK_555 MINGW64 /d/www/java ((0ca6e12...))
$ git checkout afdb6ae
Previous HEAD position was 0ca6e12 Cheng index html
HEAD is now at afdb6ae Check commit

sergi@MY_BOOK_555 MINGW64 /d/www/java ((afdb6ae...))
$ git checkout master
Previous HEAD position was afdb6ae Check commit
Switched to branch 'master'

sergi@MY_BOOK_555 MINGW64 /d/www/java (master)
$ git status --oneline
error: unknown option `oneline'
usage: git status [<options>] [--] [<pathspec>...]

    -v, --[no-]verbose    be verbose
    -s, --[no-]short      show status concisely
    -b, --[no-]branch     show branch information
    --[no-]show-stash     show stash information
    --[no-]ahead-behind   compute full ahead/behind values
    --[no-]porcelain[=<version>]
                          machine-readable output
    --[no-]long           show status in long format (default)
    -z, --[no-]null       terminate entries with NUL
    -u, --[no-]untracked-files[=<mode>]
                          show untracked files, optional modes: all, normal, no. (Default: all)
    --[no-]ignored[=<mode>]
                          show ignored files, optional modes: traditional, matching, no. (Default: traditional)
    --[no-]ignore-submodules[=<when>]
                          ignore changes to submodules, optional when: all, dirty, untracked. (Default: all)
    --[no-]column[=<style>]
                          list untracked files in columns
    --no-renames          do not detect renames
    --renames             opposite of --no-renames
    -M, --find-renames[=<n>]
                          detect renames, optionally set similarity index


sergi@MY_BOOK_555 MINGW64 /d/www/java (master)
$ git status --onelin
error: unknown option `onelin'
usage: git status [<options>] [--] [<pathspec>...]

    -v, --[no-]verbose    be verbose
    -s, --[no-]short      show status concisely
    -b, --[no-]branch     show branch information
    --[no-]show-stash     show stash information
    --[no-]ahead-behind   compute full ahead/behind values
    --[no-]porcelain[=<version>]
                          machine-readable output
    --[no-]long           show status in long format (default)
    -z, --[no-]null       terminate entries with NUL
    -u, --[no-]untracked-files[=<mode>]
                          show untracked files, optional modes: all, normal, no. (Default: all)
    --[no-]ignored[=<mode>]
                          show ignored files, optional modes: traditional, matching, no. (Default: traditional)
    --[no-]ignore-submodules[=<when>]
                          ignore changes to submodules, optional when: all, dirty, untracked. (Default: all)
    --[no-]column[=<style>]
                          list untracked files in columns
    --no-renames          do not detect renames
    --renames             opposite of --no-renames
    -M, --find-renames[=<n>]
                          detect renames, optionally set similarity index


sergi@MY_BOOK_555 MINGW64 /d/www/java (master)
$ git log --oneline
0ca6e12 (HEAD -> master) Cheng index html
afdb6ae Check commit
fa430bb gitignore file add
73bf9bb Temp add
77080df Add ferst commit

sergi@MY_BOOK_555 MINGW64 /d/www/java (master)
$ git revert 0ca6e12
[master 14fd299] Revert "Cheng index html"
 1 file changed, 2 insertions(+), 2 deletions(-)

sergi@MY_BOOK_555 MINGW64 /d/www/java (master)
$ git log --oneline
14fd299 (HEAD -> master) Revert "Cheng index html"
0ca6e12 Cheng index html
afdb6ae Check commit
fa430bb gitignore file add
73bf9bb Temp add
77080df Add ferst commit

sergi@MY_BOOK_555 MINGW64 /d/www/java (master)
$ git reset fa430bb
Unstaged changes after reset:
M       index.html

sergi@MY_BOOK_555 MINGW64 /d/www/java (master)
$ git log --oneline
fa430bb (HEAD -> master) gitignore file add
73bf9bb Temp add
77080df Add ferst commit

sergi@MY_BOOK_555 MINGW64 /d/www/java (master)
$ git reset fa430bb --hard
HEAD is now at fa430bb gitignore file add

sergi@MY_BOOK_555 MINGW64 /d/www/java (master)
$ git branch new_v1

sergi@MY_BOOK_555 MINGW64 /d/www/java (master)
$ git status
On branch master
nothing to commit, working tree clean

sergi@MY_BOOK_555 MINGW64 /d/www/java (master)
$ git checkout new_v1
Switched to branch 'new_v1'

sergi@MY_BOOK_555 MINGW64 /d/www/java (new_v1)
$ git branch -a
  master
* new_v1

sergi@MY_BOOK_555 MINGW64 /d/www/java (new_v1)
$ git add .

sergi@MY_BOOK_555 MINGW64 /d/www/java (new_v1)
$ git status
On branch new_v1
nothing to commit, working tree clean

sergi@MY_BOOK_555 MINGW64 /d/www/java (new_v1)
$ git add .

sergi@MY_BOOK_555 MINGW64 /d/www/java (new_v1)
$ git status
On branch new_v1
Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
        modified:   js/main.js


sergi@MY_BOOK_555 MINGW64 /d/www/java (new_v1)
$ git diff

sergi@MY_BOOK_555 MINGW64 /d/www/java (new_v1)
$ git status
On branch new_v1
Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
        modified:   js/main.js


sergi@MY_BOOK_555 MINGW64 /d/www/java (new_v1)
$ git commit -m "back all in mainjs"
[new_v1 e493f70] back all in mainjs
 1 file changed, 96 insertions(+)

sergi@MY_BOOK_555 MINGW64 /d/www/java (new_v1)
$ git checkout master
Switched to branch 'master'

sergi@MY_BOOK_555 MINGW64 /d/www/java (master)
$ git checkout -b test_branch
Switched to a new branch 'test_branch'

sergi@MY_BOOK_555 MINGW64 /d/www/java (test_branch)
$ git branch
  master
  new_v1
* test_branch

sergi@MY_BOOK_555 MINGW64 /d/www/java (test_branch)
$ git branch -a
  master
  new_v1
* test_branch

sergi@MY_BOOK_555 MINGW64 /d/www/java (test_branch)
$ git add .

sergi@MY_BOOK_555 MINGW64 /d/www/java (test_branch)
$ git commit - m "test_fol_b"
error: pathspec '-' did not match any file(s) known to git
error: pathspec 'm' did not match any file(s) known to git
error: pathspec 'test_fol_b' did not match any file(s) known to git

sergi@MY_BOOK_555 MINGW64 /d/www/java (test_branch)
$ git commit -m "test_fol_b"
[test_branch 9057df2] test_fol_b
 1 file changed, 10 insertions(+)
 create mode 100644 test_b/test.html

sergi@MY_BOOK_555 MINGW64 /d/www/java (test_branch)
$ git status
On branch test_branch
nothing to commit, working tree clean

sergi@MY_BOOK_555 MINGW64 /d/www/java (test_branch)
$ git branch
  master
  new_v1
* test_branch

sergi@MY_BOOK_555 MINGW64 /d/www/java (test_branch)
$ git checkout master
Switched to branch 'master'

sergi@MY_BOOK_555 MINGW64 /d/www/java (master)
$ git merge new_v1
Updating fa430bb..e493f70
Fast-forward
 js/main.js | 96 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 96 insertions(+)

sergi@MY_BOOK_555 MINGW64 /d/www/java (master)
$ git status
On branch master
nothing to commit, working tree clean

sergi@MY_BOOK_555 MINGW64 /d/www/java (master)
$ git log --oneline
e493f70 (HEAD -> master, new_v1) back all in mainjs
fa430bb gitignore file add
73bf9bb Temp add
77080df Add ferst commit

sergi@MY_BOOK_555 MINGW64 /d/www/java (master)
$ git remote add origin https://github.com/AfanasievHome/Home1.git

sergi@MY_BOOK_555 MINGW64 /d/www/java (master)
$ git remote
origin

sergi@MY_BOOK_555 MINGW64 /d/www/java (master)
$ git push -u origin master
Enumerating objects: 15, done.
Counting objects: 100% (15/15), done.
Delta compression using up to 12 threads
Compressing objects: 100% (12/12), done.
Writing objects: 100% (15/15), 6.01 KiB | 6.01 MiB/s, done.
Total 15 (delta 3), reused 0 (delta 0), pack-reused 0
remote: Resolving deltas: 100% (3/3), done.
remote:
remote: Create a pull request for 'master' on GitHub by visiting:
remote:      https://github.com/AfanasievHome/Home1/pull/new/master
remote:
To https://github.com/AfanasievHome/Home1.git
 * [new branch]      master -> master
branch 'master' set up to track 'origin/master'.

sergi@MY_BOOK_555 MINGW64 /d/www/java (master)
$ git branch
* master
  new_v1
  test_branch

sergi@MY_BOOK_555 MINGW64 /d/www/java (master)
$ git merge test_branche
merge: test_branche - not something we can merge

sergi@MY_BOOK_555 MINGW64 /d/www/java (master)
$ git merge test_branch
Merge made by the 'ort' strategy.
 test_b/test.html | 10 ++++++++++
 1 file changed, 10 insertions(+)
 create mode 100644 test_b/test.html

sergi@MY_BOOK_555 MINGW64 /d/www/java (master)
$ git remoute
git: 'remoute' is not a git command. See 'git --help'.

The most similar command is
        remote

sergi@MY_BOOK_555 MINGW64 /d/www/java (master)
$ git remote
origin

sergi@MY_BOOK_555 MINGW64 /d/www/java (master)
$ git push origin master
Enumerating objects: 8, done.
Counting objects: 100% (8/8), done.
Delta compression using up to 12 threads
Compressing objects: 100% (5/5), done.
Writing objects: 100% (6/6), 690 bytes | 690.00 KiB/s, done.
Total 6 (delta 2), reused 0 (delta 0), pack-reused 0
remote: Resolving deltas: 100% (2/2), completed with 2 local objects.
To https://github.com/AfanasievHome/Home1.git
   e493f70..3466f79  master -> master

sergi@MY_BOOK_555 MINGW64 /d/www/java (master)
$ git add .

sergi@MY_BOOK_555 MINGW64 /d/www/java (master)
$ git commit -m "add readme file"
[master 92e277e] add readme file
 1 file changed, 2 insertions(+)
 create mode 100644 README.md

sergi@MY_BOOK_555 MINGW64 /d/www/java (master)
$ git push -u origin master
Enumerating objects: 4, done.
Counting objects: 100% (4/4), done.
Delta compression using up to 12 threads
Compressing objects: 100% (3/3), done.
Writing objects: 100% (3/3), 325 bytes | 325.00 KiB/s, done.
Total 3 (delta 1), reused 0 (delta 0), pack-reused 0
remote: Resolving deltas: 100% (1/1), completed with 1 local object.
To https://github.com/AfanasievHome/Home1.git
   3466f79..92e277e  master -> master
branch 'master' set up to track 'origin/master'.

sergi@MY_BOOK_555 MINGW64 /d/www/java (master)
$ git checkou -b main
git: 'checkou' is not a git command. See 'git --help'.

The most similar command is
        checkout

sergi@MY_BOOK_555 MINGW64 /d/www/java (master)
$ git checkout -b main
Switched to a new branch 'main'

sergi@MY_BOOK_555 MINGW64 /d/www/java (main)
$ git push -u origin main
To https://github.com/AfanasievHome/Home1.git
 ! [rejected]        main -> main (fetch first)
error: failed to push some refs to 'https://github.com/AfanasievHome/Home1.git'
hint: Updates were rejected because the remote contains work that you do not
hint: have locally. This is usually caused by another repository pushing to
hint: the same ref. If you want to integrate the remote changes, use
hint: 'git pull' before pushing again.
hint: See the 'Note about fast-forwards' in 'git push --help' for details.

sergi@MY_BOOK_555 MINGW64 /d/www/java (main)
$ git add .

sergi@MY_BOOK_555 MINGW64 /d/www/java (main)
$ git status
On branch main
Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
        modified:   js/main.js


sergi@MY_BOOK_555 MINGW64 /d/www/java (main)
$ git commit -m "comment out same funciton"
[main cb8f3e3] comment out same funciton
 1 file changed, 2 insertions(+), 2 deletions(-)

sergi@MY_BOOK_555 MINGW64 /d/www/java (main)
$ git checkout master
Switched to branch 'master'
Your branch is up to date with 'origin/master'.

sergi@MY_BOOK_555 MINGW64 /d/www/java (master)
$ git push -u origin main
To https://github.com/AfanasievHome/Home1.git
 ! [rejected]        main -> main (fetch first)
error: failed to push some refs to 'https://github.com/AfanasievHome/Home1.git'
hint: Updates were rejected because the remote contains work that you do not
hint: have locally. This is usually caused by another repository pushing to
hint: the same ref. If you want to integrate the remote changes, use
hint: 'git pull' before pushing again.
hint: See the 'Note about fast-forwards' in 'git push --help' for details.

sergi@MY_BOOK_555 MINGW64 /d/www/java (master)
$ git checkout main
Switched to branch 'main'

sergi@MY_BOOK_555 MINGW64 /d/www/java (main)
$ git pull
remote: Enumerating objects: 6, done.
remote: Counting objects: 100% (6/6), done.
remote: Compressing objects: 100% (4/4), done.
remote: Total 6 (delta 1), reused 3 (delta 0), pack-reused 0
Unpacking objects: 100% (6/6), 1.24 KiB | 40.00 KiB/s, done.
From https://github.com/AfanasievHome/Home1
 * [new branch]      main       -> origin/main
There is no tracking information for the current branch.
Please specify which branch you want to merge with.
See git-pull(1) for details.

    git pull <remote> <branch>

If you wish to set tracking information for this branch you can do so with:

    git branch --set-upstream-to=origin/<branch> main


sergi@MY_BOOK_555 MINGW64 /d/www/java (main)
$ git status
On branch main
nothing to commit, working tree clean

sergi@MY_BOOK_555 MINGW64 /d/www/java (main)
$ git pull origin main
From https://github.com/AfanasievHome/Home1
 * branch            main       -> FETCH_HEAD
fatal: refusing to merge unrelated histories

sergi@MY_BOOK_555 MINGW64 /d/www/java (main)
$ ^C

sergi@MY_BOOK_555 MINGW64 /d/www/java (main)
$ git --set-upstream-to=origin/main main
unknown option: --set-upstream-to=origin/main
usage: git [-v | --version] [-h | --help] [-C <path>] [-c <name>=<value>]
           [--exec-path[=<path>]] [--html-path] [--man-path] [--info-path]
           [-p | --paginate | -P | --no-pager] [--no-replace-objects] [--bare]
           [--git-dir=<path>] [--work-tree=<path>] [--namespace=<name>]
           [--config-env=<name>=<envvar>] <command> [<args>]

sergi@MY_BOOK_555 MINGW64 /d/www/java (main)
$ git branch -m small_ch

sergi@MY_BOOK_555 MINGW64 /d/www/java (small_ch)
$ git pull -u origin small_ch
error: unknown switch `u'
usage: git pull [<options>] [<repository> [<refspec>...]]

    -v, --[no-]verbose    be more verbose
    -q, --[no-]quiet      be more quiet
    --[no-]progress       force progress reporting
    --[no-]recurse-submodules[=<on-demand>]
                          control for recursive fetching of submodules

Options related to merging
    -r, --[no-]rebase[=(false|true|merges|interactive)]
                          incorporate changes by rebasing rather than merging
    -n                    do not show a diffstat at the end of the merge
    --[no-]stat           show a diffstat at the end of the merge
    --[no-]log[=<n>]      add (at most <n>) entries from shortlog to merge commit message
    --[no-]signoff[=...]  add a Signed-off-by trailer
    --[no-]squash         create a single commit instead of doing a merge
    --[no-]commit         perform a commit if the merge succeeds (default)
    --[no-]edit           edit message before committing
    --[no-]cleanup <mode> how to strip spaces and #comments from message
    --[no-]ff             allow fast-forward
    --ff-only             abort if fast-forward is not possible
    --[no-]verify         control use of pre-merge-commit and commit-msg hooks
    --[no-]verify-signatures
                          verify that the named commit has a valid GPG signature
    --[no-]autostash      automatically stash/stash pop before and after
    -s, --[no-]strategy <strategy>
                          merge strategy to use
    -X, --[no-]strategy-option <option=value>
                          option for selected merge strategy
    -S, --[no-]gpg-sign[=<key-id>]
                          GPG sign commit
    --[no-]allow-unrelated-histories
                          allow merging unrelated histories

Options related to fetching
    --[no-]all            fetch from all remotes
    -a, --[no-]append     append to .git/FETCH_HEAD instead of overwriting
    --[no-]upload-pack <path>
                          path to upload pack on remote end
    -f, --[no-]force      force overwrite of local branch
    -t, --[no-]tags       fetch all tags and associated objects
    -p, --[no-]prune      prune remote-tracking branches no longer on remote
    -j, --[no-]jobs[=<n>] number of submodules pulled in parallel
    --[no-]dry-run        dry run
    -k, --[no-]keep       keep downloaded pack
    --[no-]depth <depth>  deepen history of shallow clone
    --[no-]shallow-since <time>
                          deepen history of shallow repository based on time
    --[no-]shallow-exclude <revision>
                          deepen history of shallow clone, excluding rev
    --[no-]deepen <n>     deepen history of shallow clone
    --unshallow           convert to a complete repository
    --[no-]update-shallow accept refs that update .git/shallow
    --refmap <refmap>     specify fetch refmap
    -o, --[no-]server-option <server-specific>
                          option to transmit
    -4, --[no-]ipv4       use IPv4 addresses only
    -6, --[no-]ipv6       use IPv6 addresses only
    --[no-]negotiation-tip <revision>
                          report that we have only objects reachable from this object
    --[no-]show-forced-updates
                          check for forced-updates on all updated branches
    --[no-]set-upstream   set upstream for git pull/fetch


sergi@MY_BOOK_555 MINGW64 /d/www/java (small_ch)
$ git push -u origin small_ch
Enumerating objects: 7, done.
Counting objects: 100% (7/7), done.
Delta compression using up to 12 threads
Compressing objects: 100% (3/3), done.
Writing objects: 100% (4/4), 354 bytes | 354.00 KiB/s, done.
Total 4 (delta 2), reused 0 (delta 0), pack-reused 0
remote: Resolving deltas: 100% (2/2), completed with 2 local objects.
remote:
remote: Create a pull request for 'small_ch' on GitHub by visiting:
remote:      https://github.com/AfanasievHome/Home1/pull/new/small_ch
remote:
To https://github.com/AfanasievHome/Home1.git
 * [new branch]      small_ch -> small_ch
branch 'small_ch' set up to track 'origin/small_ch'.

sergi@MY_BOOK_555 MINGW64 /d/www/java (small_ch)
$ git checkout master
Switched to branch 'master'
Your branch is up to date with 'origin/master'.

sergi@MY_BOOK_555 MINGW64 /d/www/java (master)
$ git pull master
fatal: 'master' does not appear to be a git repository
fatal: Could not read from remote repository.

Please make sure you have the correct access rights
and the repository exists.

sergi@MY_BOOK_555 MINGW64 /d/www/java (master)
$ git pull
remote: Enumerating objects: 6, done.
remote: Counting objects: 100% (6/6), done.
remote: Compressing objects: 100% (2/2), done.
remote: Total 3 (delta 0), reused 0 (delta 0), pack-reused 0
Unpacking objects: 100% (3/3), 1.71 KiB | 159.00 KiB/s, done.
From https://github.com/AfanasievHome/Home1
   92e277e..76c6a39  master     -> origin/master
   2aa0006..bf069c5  main       -> origin/main
Updating 92e277e..76c6a39
Fast-forward
 js/main.js | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

sergi@MY_BOOK_555 MINGW64 /d/www/java (master)
$
